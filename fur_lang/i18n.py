"""
i18n.py ‚Äì Internationalisierung (i18n) f√ºr das FUR-System

L√§dt √úbersetzungen aus /translations/*.json,
stellt zentrale Hilfsfunktionen f√ºr Templates, Cogs und Routen bereit.
"""

import json
import logging
import os

from flask import current_app, session

log = logging.getLogger(__name__)

TRANSLATION_FOLDER = os.path.join(os.path.dirname(os.path.dirname(__file__)), "translations")
LANG_FALLBACK = "de"


def load_translations(directory=TRANSLATION_FOLDER):
    """L√§dt alle JSON-Dateien aus dem √úbersetzungsordner."""
    translations = {}
    for filename in os.listdir(directory):
        if filename.endswith(".json"):
            lang_code = filename.replace(".json", "")
            try:
                with open(os.path.join(directory, filename), encoding="utf-8") as f:
                    translations[lang_code] = json.load(f)
            except Exception as e:
                log.warning(f"‚ö†Ô∏è Fehler beim Laden von {filename}: {e}")
    return translations


# üì¶ Globale √úbersetzungstabelle
translations = load_translations()


def get_supported_languages():
    """Gibt alle unterst√ºtzten Sprachen zur√ºck (z.‚ÄØB. ['de', 'en', 'tr'])."""
    return list(translations.keys())


def current_lang() -> str:
    """Ermittelt die aktuelle Sprache aus der Session oder Default-Konfiguration."""
    return session.get("lang", current_app.config.get("BABEL_DEFAULT_LOCALE", LANG_FALLBACK))


def t(key: str, default: str = None, lang: str = None, **kwargs) -> str:
    """
    Holt die √úbersetzung f√ºr den gegebenen Key.
    Unterst√ºtzt optionale {variablen} im Text via kwargs.

    Args:
        key (str): √úbersetzungsschl√ºssel
        default (str): Fallback-Text, falls Key fehlt
        lang (str): Sprachcode (z.‚ÄØB. "de", "en") ‚Äì sonst aus Session
        kwargs: Platzhalterwerte f√ºr .format()

    Returns:
        str: √úbersetzter und formatierter Text
    """
    active_lang = lang or current_lang()
    raw = translations.get(active_lang, {}).get(key, default or key)
    try:
        return raw.format(**kwargs)
    except Exception:
        return raw  # Fallback falls format(...) fehlschl√§gt
