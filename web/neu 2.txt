🗂️ 1. 🔁 Doppelte oder redundante Dateien
Typ	Konflikt	Empfehlung
ganzen ordner : System-by-FUR löschen

routes.py	⚠️ >5 Varianten: in /, /api/, /admin/, /public/, /templates/public/, /leaderboard/	➤ Zusammenführen in einheitliche Struktur mit Blueprint-Namen (z. B. admin_bp, public_bp, api_bp)

__init__.py	> kann man nicht in einem Odner alle datein die __init__.py brauchen ablegen und so nur 1 __init__.py haben?

app_factory.py	in / und in /System-by-FUR/	Nur 1 Version behalten – zentrale Blueprint-Registrierung dort bündeln die im root

bot_main.py	in / und in /bot/	Doppelung prüfen – nutze nur die modulare Bot-Variante

env_helpers.py, config.py	teils doppelt	Abgleich auf Unterschiede, dann Duplikat entfernen

auto_fixer.py	mehrfach	1x zentral im Root

🔒 2. Fehlende Sicherheitsprüfungen & .env Schwächen
send_champion_to_discord.py	Fallback Webhook-URL hart codiert	❌ → Nur mit gültiger .env starten lassen
discord_client_id, client_secret	teils mehrfach in railway.toml, .env, config.py	✅ config.py als einzig wahre Quelle behandeln
reminder_cog.py	keine Prüfung auf Bot-Verfügbarkeit bei Reminder-Loop	🛡️ mit bot.wait_until_ready() absichern (ist teilweise schon da)

🧩 3. Nicht eingebundene oder verwaiste Dateien
champion_data.py	nur champions = [] sinnvoll einbinden
poster.py	wird in send_champion_to_discord.py nicht aufgerufen	poster.py in send_champion_to_discord.py aktiv nutzen
discord_util.py	nur bei fehlender discord.py aktiv	OK als Fallback, verschieben in order scripte
leaderboard.py (Cog)	nicht geladen im Bot	➤ Sicherstellen, dass bot.load_extension("bot.cogs.leaderboard") aktiv ist
translate_sync.py	sehr stark, aber nicht dokumentiert	➤ README + cron-fähig machen
github_service.py	enthält Selbstaufruf (Import von sich selbst) ❌	→ Refactor zu einer Klasse GitHubService ohne Selbstimport

🌐 4. Webstruktur & Routing
⚠️ doppelte @public_bp.route('/')	in routes.py, public_routes.py, landing_route.py	➤ Nur eine Route / pro Blueprint behalten
static_routes.py macht Blueprint redundant	Alle Routen direkt dort, keine auth oder Trennung	➤ In admin_routes.py, member_routes.py, public_routes.py umziehen und static_routes.py entfernen


Bot-Startup (bot.load_extension(...)) für alle Cogs prüfen

Test-Skripte in scripts/ verschieben

translate_sync.py + extract_i18n_keys.py in i18n_tools/ kapseln

🔧 5. Flask-Blueprint-Check
Blueprint	Status
admin_bp	✅ aktiv mit Session-Check & Login
member_bp	✅ korrekt, mit R3-Prüfung
public_bp	⚠️ zu viele Varianten (mind. 3 Routenmodule)
api_bp	✅ /api/hall_of_fame, /api/leaderboard/<category>


➤ Empfehlung: einheitliche Benennung & zentrale Registrierung im app_factory.py

🚀 6. Startmechanik & Deployment
Komponente	Status
main_app.py	✅ offizieller Einstiegspunkt 
main.py, run.py	⚠️ Altlasten – nur eine Variante beibehalten
railway.toml	OK, verweist aber auf run.py ❌
Procfile	unklarer Inhalt

mir alles als zip aus geben

Ziel: Projekt bereinigen, vereinheitlichen und in strukturierter ZIP-Datei ausgeben

🔁 **Doppelte oder redundante Dateien entfernen/vereinheitlichen:**
- Lösche den gesamten Ordner `/System-by-FUR/`
- `routes.py`: vereinheitliche Varianten über Blueprints (`admin_bp`, `public_bp`, `api_bp`) und platziere sie unter `/blueprints/`
- `__init__.py`: platziere es nur in zentralen Paketordnern – nicht mehrfach
- `app_factory.py`: nur eine Version im Root behalten, registriere dort alle Blueprints
- `bot_main.py`: prüfe auf Dopplung, behalte modulare Variante unter `/bot/`
- `env_helpers.py`, `config.py`, `auto_fixer.py`: bereinige Duplikate, nur eine Version zentral ablegen

🔒 **Sicherheits- und .env-Prüfungen:**
- Entferne alle hartkodierten Webhooks – `.env` ist zwingend
- `config.py` ist die einzige Quelle für `client_id`, `client_secret`, etc.
- In `reminder_cog.py`: `bot.wait_until_ready()` korrekt nutzen

🧩 **Nicht eingebundene/verwaiste Dateien:**
- `champion_data.py`: richtig importieren, `champions = []` nutzen
- `poster.py`: aktiv in `send_champion_to_discord.py` nutzen
- `discord_util.py`: in fallback scripts verschieben
- `leaderboard.py`: `bot.load_extension("bot.cogs.leaderboard")` sicherstellen
- `translate_sync.py`: als `i18n_tool` einbinden + cron-fähig machen
- `github_service.py`: Refactor ohne Selbstimport

🌐 **Routing konsolidieren:**
- `/public_bp.route('/')`: nur eine Route zulassen
- `static_routes.py`: entfernen, Routen in passende Blueprints verschieben

🔧 **Blueprint-Check & Struktur vereinheitlichen:**
- Zentrale Blueprint-Registrierung in `app_factory.py`
- `/blueprints/admin_routes.py`, `/blueprints/public_routes.py`, etc.

🚀 **Startmechanik & Deployment:**
- Nur `main_app.py` beibehalten
- `run.py`, `main.py`: löschen
- `railway.toml`: auf `main_app.py` anpassen
- `Procfile`: mit eindeutigem Startbefehl versehen

📁 **Ordnerstruktur (neu in ZIP):**
project/
│
├── app_factory.py
├── config.py
├── .env
├── main_app.py
│
├── blueprints/
│ ├── admin_routes.py
│ ├── public_routes.py
│ ├── api_routes.py
│
├── bot/
│ ├── bot_main.py
│ ├── cogs/
│ │ ├── leaderboard.py
│ │ └── reminder_cog.py
│
├── i18n_tools/
│ ├── translate_sync.py
│ ├── extract_i18n_keys.py
│
├── scripts/
│ ├── test_something.py
│
└── utils/
├── discord_util.py
├── github_service.py

🎯 **Ziel:** Gib das bereinigte Projekt als .zip-Datei aus.